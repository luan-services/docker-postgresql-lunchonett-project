// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
	provider = "prisma-client-js"
	output   = "../generated/prisma"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id        String   @id @default(uuid())
	email     String   @unique
	password  String
	name      String
	role      String   @default("User")
	phone     String?
	address   String?

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	orders Order[] // relação: um usuário pode ter vários pedidos

	sessions Session[] // relação: um usuário pode ter várias sessões
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [id], references: [id])
  refreshHash String
  userAgent   String?
  ip          String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

model Product {
	id          String   @id @default(uuid())
	name        String
	description String?
	price       Decimal
	category    String
	imageUrl    String?
	available   Boolean  @default(true)

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	orderItems OrderItem[] // relação: um produto pode estar em vários itens de pedido
}

model Order {
	id           String    @id @default(uuid())
	total        Decimal
	status       String    @default("PENDING") // ex: PENDING, PREPARING, DELIVERING, COMPLETED
	observations String?   

	createdAt    DateTime  @default(now())
	updatedAt    DateTime  @updatedAt

	// relações
	userId       String    // chave estrangeira para o User
	user         User      @relation(fields: [userId], references: [id])

	items        OrderItem[] // relação: um pedido tem vários itens
}

model OrderItem {
	id        String @id @default(uuid())
	quantity  Int    // quantidade deste item no pedido

	// relações
	orderId   String
	order     Order  @relation(fields: [orderId], references: [id])

	productId String
	product   Product @relation(fields: [productId], references: [id])
}